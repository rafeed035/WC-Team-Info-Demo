# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
<<<<<<< HEAD
      - image: cimg/openjdk:17.0
    # Add steps to the job 
=======
      - image: circleci/openjdk:8-jdk-stretch
    # Add steps to the job
>>>>>>> 941d256 (#18 add circleci done)
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test

#version: 2 # use CircleCI 2.0 #
#jobs: # a collection of steps
#  build: # runs not using Workflows must have a `build` job as entry point
#
#  docker: # run the steps with Docker
#  — image: circleci/openjdk:8-jdk-stretch # …with this image as the primary container; this is where all `steps` will run
#
#  steps: # a collection of executable commands
#  — checkout # Checkout the code from Github
#  — run: ./mvnw clean install # mvn clean install tells Maven to do the clean phase in each module before running the install phase for each module.